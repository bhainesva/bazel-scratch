load("@aspect_rules_js//js:defs.bzl", "js_binary")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_esbuild//esbuild:defs.bzl", "esbuild")


# This file creates a JS executable that imports generated proto code.
# The "Happy Path" is how you would normally do this.
# The "Sad Path" is the solution I've come up with if modifications need to be
# made to the code generated by ts_proto_library.
# In this case the change is rewriting `imports` of third party libraries to 
# `requires`.

# To run the exectuables created by each path:
# Happy - bazel run //src:bin
# Sad - bazel run //src:rewritten_bin

# -----------------------------------
# Happy Path
# -----------------------------------
ts_project(
    name = "ts",
    srcs = ["in.ts"],
    allow_js = True,
    declaration = True,
    tsconfig = "//:tsconfig",
    deps = [
        "//protos:connect",
        "//:node_modules/@bufbuild/protobuf"
    ]
)

esbuild(
    name = "bundle",
    entry_point = ":ts",
    deps = [":ts"],
    tsconfig = "//:tsconfig",
)

js_binary(
    name = "bin",
    entry_point = "bundle.js",
)

# -----------------------------------
# Sad Path
# -----------------------------------
ts_project(
    name = "rewritten_ts",
    srcs = ["rewritten_in.ts"],
    allow_js = True,
    declaration = True,
    tsconfig = "//:tsconfig",
    out_dir = "out",
    deps = [
        "//src/js-proto:rewritten_jsinfo",
        "//:node_modules/@bufbuild/protobuf"
    ],
)

esbuild(
    name = "rewritten_bundle",
    entry_point = ":rewritten_ts",
    deps = [
        ":rewritten_ts",
    ],
    tsconfig = "//:tsconfig",
)

js_binary(
    name = "rewritten_bin",
    entry_point = "rewritten_bundle.js",
)   