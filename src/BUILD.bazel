load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_library")
load("@aspect_rules_ts//ts:proto.bzl", "ts_proto_library")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_esbuild//esbuild:defs.bzl", "esbuild")
load("@rules_proto//proto:defs.bzl", "proto_library")

# This file creates a JS executable that imports generated proto code.
# The "Happy Path" is how you would normally do this.
# The "Sad Path" is the solution I've come up with if modifications need to be
# made to the code generated by ts_proto_library.
# In this case the change is rewriting `imports` of third party libraries to 
# `requires`.

# To run the exectuables created by each path:
# Happy - bazel run //src:bin
# Sad - bazel run //src:rewritten_bin

# -----------------------------------
# Common
# -----------------------------------
proto_library(
    name = "proto",
    srcs = ["example.proto"],
)

ts_proto_library(
    name = "connect",
    copy_files = False,
    node_modules = "//:node_modules",
    proto = ":proto",
)

# -----------------------------------
# Happy Path
# -----------------------------------
ts_project(
    name = "ts",
    srcs = ["in.ts"],
    allow_js = True,
    declaration = True,
    tsconfig = "//:tsconfig",
    deps = [
        ":connect",
        "//:node_modules/@bufbuild/protobuf"
    ]
)

esbuild(
    name = "bundle",
    entry_point = ":ts",
    deps = [":ts"],
    tsconfig = "//:tsconfig",
)

js_binary(
    name = "bin",
    entry_point = "bundle.js",
)

# -----------------------------------
# Sad Path
# -----------------------------------
genrule(
    name = "rewritten_connect",
    # In real usage these would be calculated in a macro. 
    # Although the srcs passed in are actually js files, these have to be .ts files
    # otherwise we'll get conflicting output errors when they're passed to the
    # js_library/ts_project. But this causes a second issues which is that, since they're not really ts,
    # the generated rewritten .d.ts files aren't right. I don't know how to handle that. 
    outs = ["rewritten_example_connect.ts", "rewritten_example_pb.ts"],
    srcs = [":connect"],
    cmd = "./$(location //tools:rewrite_imports) \"$(RULEDIR)\" \"$(SRCS)\"",
    tools = ["//tools:rewrite_imports"],
)

js_library(
    name = "rewritten_jsinfo",
    declarations = [":rewritten_connect"],
    deps = [
        "//:node_modules/@bufbuild/protobuf"
    ],
)

ts_project(
    name = "rewritten_ts",
    srcs = ["rewritten_in.ts"],
    allow_js = True,
    declaration = True,
    tsconfig = "//:tsconfig",
    deps = [
        ":rewritten_jsinfo",
        "//:node_modules/@bufbuild/protobuf"
    ],
)

esbuild(
    name = "rewritten_bundle",
    entry_point = ":rewritten_ts",
    deps = [
        ":rewritten_ts",
    ],
    tsconfig = "//:tsconfig",
)

js_binary(
    name = "rewritten_bin",
    entry_point = "rewritten_bundle.js",
)   